{"ast":null,"code":"export const formatDateForTodoist = dateInput => {\n  if (!dateInput) return \"\";\n  const naturalLanguage = [\"today\", \"tomorrow\", \"next monday\", \"next tuesday\", \"next wednesday\", \"next thursday\", \"next friday\", \"next saturday\", \"next sunday\", \"next week\", \"next month\", \"this weekend\"];\n  if (naturalLanguage.some(phrase => dateInput.toLowerCase().includes(phrase))) {\n    return dateInput;\n  }\n  const date = new Date(dateInput);\n  if (!isNaN(date.getTime())) {\n    return date.toISOString().split(\"T\")[0];\n  }\n  return dateInput;\n};\nexport const getWeekDates = startDate => {\n  const dates = [];\n  const current = new Date(startDate);\n  for (let i = 0; i < 7; i++) {\n    dates.push(new Date(current));\n    current.setDate(current.getDate() + 1);\n  }\n  return dates;\n};\nexport const formatWeekRange = startDate => {\n  const endDate = new Date(startDate);\n  endDate.setDate(startDate.getDate() + 6);\n  const options = {\n    month: \"short\",\n    day: \"numeric\"\n  };\n  return `${startDate.toLocaleDateString(\"en-US\", options)} - ${endDate.toLocaleDateString(\"en-US\", options)}`;\n};\nexport const toDateKey = date => {\n  const d = new Date(date);\n  return [d.getFullYear(), String(d.getMonth() + 1).padStart(2, \"0\"), String(d.getDate()).padStart(2, \"0\")].join(\"-\");\n};\nexport const parseDateKey = s => {\n  const [y, m, d] = s.split(\"-\");\n  return new Date(Number(y), Number(m) - 1, Number(d));\n};\nexport const getCurrentWeekStart = () => {\n  const today = new Date();\n  const dayOfWeek = today.getDay();\n  const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Adjust when day is Sunday\n  const start = new Date(today.setDate(diff));\n  start.setHours(0, 0, 0, 0);\n  return start;\n};\nexport const isTaskOverdue = task => {\n  if (!task.due) return false;\n  const dueDate = new Date(task.due);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return dueDate < today && !task.completed;\n};\nexport const isTaskDueToday = task => {\n  if (!task.due) return false;\n  const dueDate = new Date(task.due);\n  const today = new Date();\n  return dueDate.toDateString() === today.toDateString();\n};\nexport const isTaskDueThisWeek = task => {\n  if (!task.due) return false;\n  const dueDate = new Date(task.due);\n  const today = new Date();\n  const weekFromNow = new Date(today);\n  weekFromNow.setDate(today.getDate() + 7);\n  return dueDate >= today && dueDate <= weekFromNow;\n};","map":{"version":3,"names":["formatDateForTodoist","dateInput","naturalLanguage","some","phrase","toLowerCase","includes","date","Date","isNaN","getTime","toISOString","split","getWeekDates","startDate","dates","current","i","push","setDate","getDate","formatWeekRange","endDate","options","month","day","toLocaleDateString","toDateKey","d","getFullYear","String","getMonth","padStart","join","parseDateKey","s","y","m","Number","getCurrentWeekStart","today","dayOfWeek","getDay","diff","start","setHours","isTaskOverdue","task","due","dueDate","completed","isTaskDueToday","toDateString","isTaskDueThisWeek","weekFromNow"],"sources":["/home/joebutler/Downloads/lifesync-master/src/utils/dateUtils.js"],"sourcesContent":["export const formatDateForTodoist = (dateInput) => {\n  if (!dateInput) return \"\";\n\n  const naturalLanguage = [\n    \"today\",\n    \"tomorrow\",\n    \"next monday\",\n    \"next tuesday\",\n    \"next wednesday\",\n    \"next thursday\",\n    \"next friday\",\n    \"next saturday\",\n    \"next sunday\",\n    \"next week\",\n    \"next month\",\n    \"this weekend\",\n  ];\n\n  if (\n    naturalLanguage.some((phrase) => dateInput.toLowerCase().includes(phrase))\n  ) {\n    return dateInput;\n  }\n\n  const date = new Date(dateInput);\n  if (!isNaN(date.getTime())) {\n    return date.toISOString().split(\"T\")[0];\n  }\n\n  return dateInput;\n};\n\nexport const getWeekDates = (startDate) => {\n  const dates = [];\n  const current = new Date(startDate);\n\n  for (let i = 0; i < 7; i++) {\n    dates.push(new Date(current));\n    current.setDate(current.getDate() + 1);\n  }\n\n  return dates;\n};\n\nexport const formatWeekRange = (startDate) => {\n  const endDate = new Date(startDate);\n  endDate.setDate(startDate.getDate() + 6);\n\n  const options = { month: \"short\", day: \"numeric\" };\n  return `${startDate.toLocaleDateString(\"en-US\", options)} - ${endDate.toLocaleDateString(\"en-US\", options)}`;\n};\n\nexport const toDateKey = (date) => {\n  const d = new Date(date);\n  return [\n    d.getFullYear(),\n    String(d.getMonth() + 1).padStart(2, \"0\"),\n    String(d.getDate()).padStart(2, \"0\"),\n  ].join(\"-\");\n};\n\nexport const parseDateKey = (s) => {\n  const [y, m, d] = s.split(\"-\");\n  return new Date(Number(y), Number(m) - 1, Number(d));\n};\n\nexport const getCurrentWeekStart = () => {\n  const today = new Date();\n  const dayOfWeek = today.getDay();\n  const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Adjust when day is Sunday\n  const start = new Date(today.setDate(diff));\n  start.setHours(0, 0, 0, 0);\n  return start;\n};\n\nexport const isTaskOverdue = (task) => {\n  if (!task.due) return false;\n  const dueDate = new Date(task.due);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return dueDate < today && !task.completed;\n};\n\nexport const isTaskDueToday = (task) => {\n  if (!task.due) return false;\n  const dueDate = new Date(task.due);\n  const today = new Date();\n  return dueDate.toDateString() === today.toDateString();\n};\n\nexport const isTaskDueThisWeek = (task) => {\n  if (!task.due) return false;\n  const dueDate = new Date(task.due);\n  const today = new Date();\n  const weekFromNow = new Date(today);\n  weekFromNow.setDate(today.getDate() + 7);\n  return dueDate >= today && dueDate <= weekFromNow;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}