{"ast":null,"code":"import { isTaskOverdue, isTaskDueToday, isTaskDueThisWeek, toDateKey } from \"./dateUtils\";\nexport const getFilteredTasks = (tasks, activeFilters, selectedProjects) => {\n  let filtered = tasks.filter(task => !task.project_name || task.project_name.toLowerCase() !== \"shopping list\");\n  if (activeFilters.has(\"today\")) {\n    filtered = filtered.filter(task => isTaskDueToday(task));\n  }\n  if (activeFilters.has(\"week\")) {\n    filtered = filtered.filter(task => isTaskDueThisWeek(task));\n  }\n  if (activeFilters.has(\"overdue\")) {\n    filtered = filtered.filter(task => isTaskOverdue(task));\n  }\n  if (activeFilters.has(\"bridge_club\")) {\n    filtered = filtered.filter(task => task.project_name && task.project_name.toLowerCase().includes(\"bridge club\"));\n  }\n  if (activeFilters.has(\"home\")) {\n    filtered = filtered.filter(task => task.project_name && task.project_name.toLowerCase() === \"home\");\n  }\n  if (activeFilters.has(\"cooking\")) {\n    filtered = filtered.filter(task => task.project_name && task.project_name.toLowerCase() === \"meal_planning\");\n  }\n  if (selectedProjects.size > 0) {\n    filtered = filtered.filter(task => task.project_id && selectedProjects.has(task.project_id));\n  }\n  return filtered;\n};\nexport const getSortedTasks = (tasks, sortBy) => {\n  const sorted = [...tasks];\n  switch (sortBy) {\n    case \"date\":\n      return sorted.sort((a, b) => {\n        if (!a.due && !b.due) return 0;\n        if (!a.due) return 1;\n        if (!b.due) return -1;\n        return new Date(a.due) - new Date(b.due);\n      });\n    case \"priority\":\n      return sorted.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n    case \"alphabetical\":\n      return sorted.sort((a, b) => (a.content || a.title || \"\").localeCompare(b.content || b.title || \"\"));\n    default:\n      return sorted;\n  }\n};\nexport const getGroupedTasks = (tasks, groupBy) => {\n  if (groupBy === \"none\") {\n    return {\n      \"All Tasks\": tasks\n    };\n  }\n  const groups = {};\n  tasks.forEach(task => {\n    let groupKey;\n    switch (groupBy) {\n      case \"project\":\n        groupKey = task.project_name || \"No Project\";\n        break;\n      case \"priority\":\n        groupKey = task.priority ? `Priority ${task.priority}` : \"No Priority\";\n        break;\n      case \"date\":\n        if (isTaskOverdue(task)) {\n          groupKey = \"Overdue\";\n        } else if (isTaskDueToday(task)) {\n          groupKey = \"Today\";\n        } else if (isTaskDueThisWeek(task)) {\n          groupKey = \"This Week\";\n        } else if (task.due) {\n          groupKey = \"Later\";\n        } else {\n          groupKey = \"No Due Date\";\n        }\n        break;\n      case \"label\":\n        if (task.labels && task.labels.length > 0) {\n          groupKey = task.labels[0];\n        } else {\n          groupKey = \"No Label\";\n        }\n        break;\n      default:\n        groupKey = \"All Tasks\";\n    }\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(task);\n  });\n  return groups;\n};\nexport const getUnscheduledTasks = (tasks, taskFilter) => {\n  let filteredTasks = tasks.filter(task => task.source === \"todoist\" && !task.completed && !task.due && (\n  // Only truly unscheduled tasks (no due date)\n  !task.project_name || task.project_name.toLowerCase() !== \"shopping list\"));\n  switch (taskFilter) {\n    case \"bridge_club\":\n      filteredTasks = filteredTasks.filter(task => task.project_name && task.project_name.toLowerCase().includes(\"bridge club\"));\n      break;\n    case \"home\":\n      filteredTasks = filteredTasks.filter(task => task.project_name && task.project_name.toLowerCase() === \"home\");\n      break;\n    case \"urgent\":\n      filteredTasks = filteredTasks.filter(task => task.priority === 4);\n      break;\n    case \"all\":\n    default:\n      break;\n  }\n  return filteredTasks;\n};\nexport const removeScheduledTasks = (tasks, scheduledTasks) => {\n  const scheduledTaskIds = new Set(scheduledTasks.map(task => task.id));\n  return tasks.filter(task => !scheduledTaskIds.has(task.id));\n};\nexport const filterTasksByString = (tasks, taskFilter) => {\n  let filteredTasks = tasks.filter(task => !task.completed && (!task.project_name || task.project_name.toLowerCase() !== \"shopping list\"));\n  switch (taskFilter) {\n    case \"bridge_club\":\n      filteredTasks = filteredTasks.filter(task => task.project_name && task.project_name.toLowerCase().includes(\"bridge club\"));\n      break;\n    case \"home\":\n      filteredTasks = filteredTasks.filter(task => task.project_name && task.project_name.toLowerCase() === \"home\");\n      break;\n    case \"urgent\":\n      filteredTasks = filteredTasks.filter(task => task.priority === 4);\n      break;\n    case \"all\":\n    default:\n      break;\n  }\n  return filteredTasks;\n};\nexport const getTasksForDate = (tasks, date) => {\n  const dateStr = date.toISOString().split('T')[0];\n  return tasks.filter(task => {\n    if (!task.due_date) return false;\n    const taskDate = new Date(task.due_date).toISOString().split('T')[0];\n    return taskDate === dateStr;\n  });\n};\nexport const getTasksForDate_old = (tasks, date, taskOrder) => {\n  const dateString = toDateKey(date);\n  const dayTasks = tasks.filter(task => task.due && task.due.startsWith(dateString) && !task.completed);\n\n  // Apply custom ordering if it exists\n  const order = taskOrder[dateString];\n  if (order && order.length > 0) {\n    const orderedTasks = [];\n    const unorderedTasks = [];\n\n    // First, add tasks in the specified order\n    order.forEach(taskId => {\n      const task = dayTasks.find(t => t.id === taskId);\n      if (task) {\n        orderedTasks.push(task);\n      }\n    });\n\n    // Then add any tasks that aren't in the order (new tasks)\n    dayTasks.forEach(task => {\n      if (!order.includes(task.id)) {\n        unorderedTasks.push(task);\n      }\n    });\n    return [...orderedTasks, ...unorderedTasks];\n  }\n  return dayTasks;\n};\nexport const groupTasksByPriority = tasks => {\n  return tasks.reduce((groups, task) => {\n    const priority = task.priority || 1;\n    if (!groups[priority]) {\n      groups[priority] = [];\n    }\n    groups[priority].push(task);\n    return groups;\n  }, {});\n};\nexport const searchTasks = (tasks, query) => {\n  if (!query.trim()) return tasks;\n  const searchTerm = query.toLowerCase().trim();\n  return tasks.filter(task => {\n    // Search in task content/title\n    const content = (task.content || task.title || \"\").toLowerCase();\n    if (content.includes(searchTerm)) return true;\n\n    // Search in project name\n    if (task.project_name && task.project_name.toLowerCase().includes(searchTerm)) return true;\n\n    // Search in labels\n    if (task.labels && task.labels.some(label => label.toLowerCase().includes(searchTerm))) return true;\n\n    // Search in description if available\n    if (task.description && task.description.toLowerCase().includes(searchTerm)) return true;\n    return false;\n  });\n};\nexport const toggleFilter = (filterKey, activeFilters, setActiveFilters, setSelectedProjects, event) => {\n  const isCtrlClick = (event === null || event === void 0 ? void 0 : event.ctrlKey) || (event === null || event === void 0 ? void 0 : event.metaKey);\n  if (filterKey === \"all\") {\n    setActiveFilters(new Set([\"all\"]));\n    setSelectedProjects(new Set());\n  } else if (isCtrlClick) {\n    // Ctrl+click: additive filtering\n    const newFilters = new Set(activeFilters);\n    newFilters.delete(\"all\"); // Remove 'all' when selecting specific filters\n\n    if (newFilters.has(filterKey)) {\n      newFilters.delete(filterKey);\n    } else {\n      newFilters.add(filterKey);\n    }\n\n    // If no filters left, add 'all' back\n    if (newFilters.size === 0) {\n      newFilters.add(\"all\");\n    }\n    setActiveFilters(newFilters);\n  } else {\n    // Normal click: exclusive filtering\n    setActiveFilters(new Set([filterKey]));\n    setSelectedProjects(new Set());\n  }\n};","map":{"version":3,"names":["isTaskOverdue","isTaskDueToday","isTaskDueThisWeek","toDateKey","getFilteredTasks","tasks","activeFilters","selectedProjects","filtered","filter","task","project_name","toLowerCase","has","includes","size","project_id","getSortedTasks","sortBy","sorted","sort","a","b","due","Date","priority","content","title","localeCompare","getGroupedTasks","groupBy","groups","forEach","groupKey","labels","length","push","getUnscheduledTasks","taskFilter","filteredTasks","source","completed","removeScheduledTasks","scheduledTasks","scheduledTaskIds","Set","map","id","filterTasksByString","getTasksForDate","date","dateStr","toISOString","split","due_date","taskDate","getTasksForDate_old","taskOrder","dateString","dayTasks","startsWith","order","orderedTasks","unorderedTasks","taskId","find","t","groupTasksByPriority","reduce","searchTasks","query","trim","searchTerm","some","label","description","toggleFilter","filterKey","setActiveFilters","setSelectedProjects","event","isCtrlClick","ctrlKey","metaKey","newFilters","delete","add"],"sources":["/home/joebutler/Downloads/lifesync-master/src/utils/taskUtils.js"],"sourcesContent":["import {\n  isTaskOverdue,\n  isTaskDueToday,\n  isTaskDueThisWeek,\n  toDateKey,\n} from \"./dateUtils\";\n\nexport const getFilteredTasks = (tasks, activeFilters, selectedProjects) => {\n  let filtered = tasks.filter(\n    (task) =>\n      !task.project_name || task.project_name.toLowerCase() !== \"shopping list\",\n  );\n\n  if (activeFilters.has(\"today\")) {\n    filtered = filtered.filter((task) => isTaskDueToday(task));\n  }\n  if (activeFilters.has(\"week\")) {\n    filtered = filtered.filter((task) => isTaskDueThisWeek(task));\n  }\n  if (activeFilters.has(\"overdue\")) {\n    filtered = filtered.filter((task) => isTaskOverdue(task));\n  }\n  if (activeFilters.has(\"bridge_club\")) {\n    filtered = filtered.filter(\n      (task) =>\n        task.project_name &&\n        task.project_name.toLowerCase().includes(\"bridge club\"),\n    );\n  }\n  if (activeFilters.has(\"home\")) {\n    filtered = filtered.filter(\n      (task) => task.project_name && task.project_name.toLowerCase() === \"home\",\n    );\n  }\n  if (activeFilters.has(\"cooking\")) {\n    filtered = filtered.filter(\n      (task) =>\n        task.project_name &&\n        task.project_name.toLowerCase() === \"meal_planning\",\n    );\n  }\n\n  if (selectedProjects.size > 0) {\n    filtered = filtered.filter(\n      (task) => task.project_id && selectedProjects.has(task.project_id),\n    );\n  }\n\n  return filtered;\n};\n\nexport const getSortedTasks = (tasks, sortBy) => {\n  const sorted = [...tasks];\n\n  switch (sortBy) {\n    case \"date\":\n      return sorted.sort((a, b) => {\n        if (!a.due && !b.due) return 0;\n        if (!a.due) return 1;\n        if (!b.due) return -1;\n        return new Date(a.due) - new Date(b.due);\n      });\n    case \"priority\":\n      return sorted.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n    case \"alphabetical\":\n      return sorted.sort((a, b) =>\n        (a.content || a.title || \"\").localeCompare(b.content || b.title || \"\"),\n      );\n    default:\n      return sorted;\n  }\n};\n\nexport const getGroupedTasks = (tasks, groupBy) => {\n  if (groupBy === \"none\") {\n    return { \"All Tasks\": tasks };\n  }\n\n  const groups = {};\n\n  tasks.forEach((task) => {\n    let groupKey;\n\n    switch (groupBy) {\n      case \"project\":\n        groupKey = task.project_name || \"No Project\";\n        break;\n      case \"priority\":\n        groupKey = task.priority ? `Priority ${task.priority}` : \"No Priority\";\n        break;\n      case \"date\":\n        if (isTaskOverdue(task)) {\n          groupKey = \"Overdue\";\n        } else if (isTaskDueToday(task)) {\n          groupKey = \"Today\";\n        } else if (isTaskDueThisWeek(task)) {\n          groupKey = \"This Week\";\n        } else if (task.due) {\n          groupKey = \"Later\";\n        } else {\n          groupKey = \"No Due Date\";\n        }\n        break;\n      case \"label\":\n        if (task.labels && task.labels.length > 0) {\n          groupKey = task.labels[0];\n        } else {\n          groupKey = \"No Label\";\n        }\n        break;\n      default:\n        groupKey = \"All Tasks\";\n    }\n\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(task);\n  });\n\n  return groups;\n};\n\nexport const getUnscheduledTasks = (tasks, taskFilter) => {\n  let filteredTasks = tasks.filter(\n    (task) =>\n      task.source === \"todoist\" &&\n      !task.completed &&\n      !task.due && // Only truly unscheduled tasks (no due date)\n      (!task.project_name ||\n        task.project_name.toLowerCase() !== \"shopping list\"),\n  );\n\n  switch (taskFilter) {\n    case \"bridge_club\":\n      filteredTasks = filteredTasks.filter(\n        (task) =>\n          task.project_name &&\n          task.project_name.toLowerCase().includes(\"bridge club\"),\n      );\n      break;\n    case \"home\":\n      filteredTasks = filteredTasks.filter(\n        (task) =>\n          task.project_name && task.project_name.toLowerCase() === \"home\",\n      );\n      break;\n    case \"urgent\":\n      filteredTasks = filteredTasks.filter((task) => task.priority === 4);\n      break;\n    case \"all\":\n    default:\n      break;\n  }\n  return filteredTasks;\n};\n\nexport const removeScheduledTasks = (tasks, scheduledTasks) => {\n  const scheduledTaskIds = new Set(scheduledTasks.map(task => task.id));\n  return tasks.filter(task => !scheduledTaskIds.has(task.id));\n};\n\nexport const filterTasksByString = (tasks, taskFilter) => {\n  let filteredTasks = tasks.filter(\n    (task) =>\n      !task.completed &&\n      (!task.project_name ||\n        task.project_name.toLowerCase() !== \"shopping list\"),\n  );\n\n  switch (taskFilter) {\n    case \"bridge_club\":\n      filteredTasks = filteredTasks.filter(\n        (task) =>\n          task.project_name &&\n          task.project_name.toLowerCase().includes(\"bridge club\"),\n      );\n      break;\n    case \"home\":\n      filteredTasks = filteredTasks.filter(\n        (task) =>\n          task.project_name && task.project_name.toLowerCase() === \"home\",\n      );\n      break;\n    case \"urgent\":\n      filteredTasks = filteredTasks.filter((task) => task.priority === 4);\n      break;\n    case \"all\":\n    default:\n      break;\n  }\n  return filteredTasks;\n};\n\nexport const getTasksForDate = (tasks, date) => {\n  const dateStr = date.toISOString().split('T')[0];\n  return tasks.filter(task => {\n    if (!task.due_date) return false;\n    const taskDate = new Date(task.due_date).toISOString().split('T')[0];\n    return taskDate === dateStr;\n  });\n};\n\nexport const getTasksForDate_old = (tasks, date, taskOrder) => {\n  const dateString = toDateKey(date);\n  const dayTasks = tasks.filter(\n    (task) => task.due && task.due.startsWith(dateString) && !task.completed,\n  );\n\n  // Apply custom ordering if it exists\n  const order = taskOrder[dateString];\n  if (order && order.length > 0) {\n    const orderedTasks = [];\n    const unorderedTasks = [];\n\n    // First, add tasks in the specified order\n    order.forEach((taskId) => {\n      const task = dayTasks.find((t) => t.id === taskId);\n      if (task) {\n        orderedTasks.push(task);\n      }\n    });\n\n    // Then add any tasks that aren't in the order (new tasks)\n    dayTasks.forEach((task) => {\n      if (!order.includes(task.id)) {\n        unorderedTasks.push(task);\n      }\n    });\n\n    return [...orderedTasks, ...unorderedTasks];\n  }\n\n  return dayTasks;\n};\n\nexport const groupTasksByPriority = (tasks) => {\n  return tasks.reduce((groups, task) => {\n    const priority = task.priority || 1;\n    if (!groups[priority]) {\n      groups[priority] = [];\n    }\n    groups[priority].push(task);\n    return groups;\n  }, {});\n};\n\nexport const searchTasks = (tasks, query) => {\n  if (!query.trim()) return tasks;\n\n  const searchTerm = query.toLowerCase().trim();\n\n  return tasks.filter((task) => {\n    // Search in task content/title\n    const content = (task.content || task.title || \"\").toLowerCase();\n    if (content.includes(searchTerm)) return true;\n\n    // Search in project name\n    if (\n      task.project_name &&\n      task.project_name.toLowerCase().includes(searchTerm)\n    )\n      return true;\n\n    // Search in labels\n    if (\n      task.labels &&\n      task.labels.some((label) => label.toLowerCase().includes(searchTerm))\n    )\n      return true;\n\n    // Search in description if available\n    if (task.description && task.description.toLowerCase().includes(searchTerm))\n      return true;\n\n    return false;\n  });\n};\n\nexport const toggleFilter = (\n  filterKey,\n  activeFilters,\n  setActiveFilters,\n  setSelectedProjects,\n  event,\n) => {\n  const isCtrlClick = event?.ctrlKey || event?.metaKey;\n\n  if (filterKey === \"all\") {\n    setActiveFilters(new Set([\"all\"]));\n    setSelectedProjects(new Set());\n  } else if (isCtrlClick) {\n    // Ctrl+click: additive filtering\n    const newFilters = new Set(activeFilters);\n    newFilters.delete(\"all\"); // Remove 'all' when selecting specific filters\n\n    if (newFilters.has(filterKey)) {\n      newFilters.delete(filterKey);\n    } else {\n      newFilters.add(filterKey);\n    }\n\n    // If no filters left, add 'all' back\n    if (newFilters.size === 0) {\n      newFilters.add(\"all\");\n    }\n\n    setActiveFilters(newFilters);\n  } else {\n    // Normal click: exclusive filtering\n    setActiveFilters(new Set([filterKey]));\n    setSelectedProjects(new Set());\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}