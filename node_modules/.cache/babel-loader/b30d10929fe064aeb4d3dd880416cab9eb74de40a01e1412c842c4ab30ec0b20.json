{"ast":null,"code":"const API_BASE_URL = 'https://api.todoist.com/rest/v2';\nclass TodoistService {\n  static async getTasks(token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch tasks: ${response.status} ${response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('TodoistService.getTasks error:', error);\n      throw new Error(`Network error: ${error.message}`);\n    }\n  }\n  static async getProjects(token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/projects`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch projects: ${response.status} ${response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('TodoistService.getProjects error:', error);\n      throw new Error(`Network error: ${error.message}`);\n    }\n  }\n  static async addTask(token, taskData) {\n    const response = await fetch(`${API_BASE_URL}/tasks`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(taskData)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to add task: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  static async updateTask(token, taskId, updates) {\n    // Map our internal field names to Todoist API field names\n    const todoistUpdates = {};\n    if (updates.content !== undefined) todoistUpdates.content = updates.content;\n    if (updates.description !== undefined) todoistUpdates.description = updates.description;\n    if (updates.priority !== undefined) todoistUpdates.priority = updates.priority;\n    if (updates.due !== undefined) todoistUpdates.due_string = updates.due;\n    if (updates.project_id !== undefined) todoistUpdates.project_id = updates.project_id;\n    if (updates.labels !== undefined) todoistUpdates.labels = updates.labels;\n    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(todoistUpdates)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update task: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  static async deleteTask(token, taskId) {\n    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to delete task: ${response.statusText}`);\n    }\n  }\n  static async completeTask(token, taskId) {\n    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}/close`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to complete task: ${response.statusText}`);\n    }\n  }\n}\nexport default TodoistService;","map":{"version":3,"names":["API_BASE_URL","TodoistService","getTasks","token","response","fetch","method","headers","ok","Error","status","statusText","json","error","console","message","getProjects","addTask","taskData","body","JSON","stringify","updateTask","taskId","updates","todoistUpdates","content","undefined","description","priority","due","due_string","project_id","labels","deleteTask","completeTask"],"sources":["/home/joebutler/Downloads/lifesync-master/src/services/TodoistService.js"],"sourcesContent":["const API_BASE_URL = 'https://api.todoist.com/rest/v2';\n\nclass TodoistService {\n  static async getTasks(token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch tasks: ${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    } catch (error) {\n      console.error('TodoistService.getTasks error:', error);\n      throw new Error(`Network error: ${error.message}`);\n    }\n  }\n\n  static async getProjects(token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/projects`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch projects: ${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    } catch (error) {\n      console.error('TodoistService.getProjects error:', error);\n      throw new Error(`Network error: ${error.message}`);\n    }\n  }\n\n  static async addTask(token, taskData) {\n    const response = await fetch(`${API_BASE_URL}/tasks`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(taskData)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to add task: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  static async updateTask(token, taskId, updates) {\n    // Map our internal field names to Todoist API field names\n    const todoistUpdates = {};\n    \n    if (updates.content !== undefined) todoistUpdates.content = updates.content;\n    if (updates.description !== undefined) todoistUpdates.description = updates.description;\n    if (updates.priority !== undefined) todoistUpdates.priority = updates.priority;\n    if (updates.due !== undefined) todoistUpdates.due_string = updates.due;\n    if (updates.project_id !== undefined) todoistUpdates.project_id = updates.project_id;\n    if (updates.labels !== undefined) todoistUpdates.labels = updates.labels;\n\n    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(todoistUpdates)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to update task: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  static async deleteTask(token, taskId) {\n    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to delete task: ${response.statusText}`);\n    }\n  }\n\n  static async completeTask(token, taskId) {\n    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}/close`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to complete task: ${response.statusText}`);\n    }\n  }\n}\n\nexport default TodoistService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}